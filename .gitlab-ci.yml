# set to local images because too long execution
default:
  image: registry.gitlab.com/vstconsulting/images:ubuntu-v4

variables:
  GET_SOURCES_ATTEMPTS: 3
  ARTIFACT_DOWNLOAD_ATTEMPTS: 3
  RESTORE_CACHE_ATTEMPTS: 3
  DJANGO_LOG_LEVEL: 'DEBUG'
  TOX_ARGS: "--workdir /cache/.tox_polemarch_${CI_BUILD_REF_NAME}"
  CCACHE_DIR: /cache/.ccache
  CC: ccache gcc
  DOCKER_DRIVER: "overlay2"
  REGISTRY_IMAGE: "${CI_REGISTRY_IMAGE}"
  REGISTRY_IMAGE_TAG: "${KUBE_NAMESPACE}"
  REGISTRY_USER: "${CI_REGISTRY_USER}"
  REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
  REGISTRY_URL: "${CI_REGISTRY}"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: "tcp://docker_service_host:2375"
  K8S_INGRESS_DOMAIN: "polemarch-$KUBE_NAMESPACE.$KUBE_INGRESS_BASE_DOMAIN"
  LC_ALL: en_US.UTF-8
  LANG: en_US.UTF-8

stages:
  - code_standarts
  - build
  - test
  - packaging-test
  - release
  - publish

# Test templates
###########################################
.branch_tests_template: &branch_tests
  stage: test
  image: registry.gitlab.com/vstconsulting/images:ubuntu-v4
  coverage: '/\d+\%\s*$/'
  variables:
    TOX_ENVS: ""
    YARN_CACHE_FOLDER: "${CI_PROJECT_DIR}/yarn"
  before_script:
    - >
      if [ "${CI_COMMIT_REF_NAME}" != "master" -a "${CI_COMMIT_REF_NAME}" != "developer" ]; then
        export TOX_ARGS="--workdir /tmp/.tox_polemarch_${CI_COMMIT_REF_NAME}";
        unset BUILD_OPTIMIZATION;
      fi
    - if [ "${TOX_ENVS}" ]; then export TOX_ARGS="${TOX_ARGS} -e ${TOX_ENVS}"; fi
  script:
   - tox $TOX_ARGS
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH =~ /^release_/'
      when: on_success
    - if: '($CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH !~ /^release_/) && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "external_pull_request_event")'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_TAG == null'
      when: on_success
    - when: never


.js_tests_template: &branch_js_tests
  <<: *branch_tests
  image: registry.gitlab.com/vstconsulting/images:node20-tests
  before_script:
    - yarn install --pure-lockfile --mutex network
  script:
    - yarn test


# Branch tests
###########################################
code_style:
  <<: *branch_tests
  stage: code_standarts
  variables:
    TOX_ENVS: "flake,pylint"

js_style:
  <<: *branch_js_tests
  stage: code_standarts
  script:
    - yarn lint


functional_test:
  <<: *branch_tests
  needs: ["code_style"]
  variables:
    TOX_ENVS: "py311-coverage,py310-install"


# Realese
###########################################
release:
  stage: release
  image: registry.gitlab.com/vstconsulting/images:ubuntu-v4
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $GIT_ACCESS_USER && $GIT_ACCESS_PASSWORD'
      when: on_success
    - when: never
  before_script:
    - url_host=`echo "${CI_REPOSITORY_URL}" | sed -e "s/https:\/\/gitlab-ci-token:.*@//g"`
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git remote set-url origin "https://${GIT_ACCESS_USER}:${GIT_ACCESS_PASSWORD}@${url_host}"
  script:
    - bash autorelease.sh

pages:
  stage: release
  script:
    - tox -e builddoc $TOX_ARGS
    - mv doc/_build/html public
  artifacts:
    paths:
    - public
  rules:
    - if: '$CI_COMMIT_BRANCH == "developer" && $GIT_ACCESS_USER && $GIT_ACCESS_PASSWORD'
      when: always
    - when: never

release_pypi:
  stage: release
  image: registry.gitlab.com/vstconsulting/images:build
  rules:
    - if: '$CI_COMMIT_TAG && $PYPI_UPLOAD_PASSWORD && $PYPI_UPLOAD_NAME'
      when: on_success
      allow_failure: true
    - when: never
  variables:
    TOX_ARGS: ""
  script:
   - tox -c tox_build.ini $TOX_ARGS
   - twine upload -u ${PYPI_UPLOAD_NAME} -p ${PYPI_UPLOAD_PASSWORD} $(find dist/*.{tar.gz,whl})
  artifacts:
    name: "release-packages-${CI_BUILD_REF_NAME}.${CI_BUILD_ID}"
    paths:
    - dist/

publish_docker:
  stage: publish
  image: registry.werf.io/werf/werf
  before_script:
    - type werf && source $(werf ci-env gitlab --as-file)
    - werf version
  script:
    - werf cr login -u $POLEMARCH_DOCKER_USER -p $POLEMARCH_DOCKER_PASSWORD index.docker.io
    - werf export --repo=$WERF_REPO/storage --tag=$WERF_REPO:$CI_COMMIT_TAG --tag=index.docker.io/$POLEMARCH_DOCKER_IMAGE_NAME:$CI_COMMIT_TAG
    - werf export --repo=$WERF_REPO/storage --tag=$WERF_REPO:latest --tag=index.docker.io/$POLEMARCH_DOCKER_IMAGE_NAME:latest
  after_script:
    - werf cr login -u nobody -p ${WERF_IMAGES_CLEANUP_PASSWORD} ${CI_REGISTRY}
    - werf cleanup --repo=$WERF_REPO/storage
  rules:
    - if: '$CI_COMMIT_TAG && $POLEMARCH_DOCKER_USER && $POLEMARCH_DOCKER_PASSWORD && $POLEMARCH_DOCKER_IMAGE_NAME && $WERF_IMAGES_CLEANUP_PASSWORD'
      when: on_success
    - when: never

publish_release:
  stage: publish
  image: registry.gitlab.com/vstconsulting/images:ubuntu-v4
  allow_failure: true
  needs: ["release_pypi"]
  rules:
    - if: '$CI_COMMIT_TAG && $PYPI_UPLOAD_PASSWORD && $PYPI_UPLOAD_NAME'
      when: on_success
    - when: never
  before_script:
  - git config --global user.name "${GITLAB_USER_NAME}"
  - git config --global user.email "${GITLAB_USER_EMAIL}"
  - git push https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/vstconsulting/polemarch.git ${CI_COMMIT_TAG} || echo "Failed to upload to github."
  script:
  - tox -e release
